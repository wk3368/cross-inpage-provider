{"version":3,"file":"static/chunks/370.c726d2a3e3f61a23.js","mappings":"2/CAeA,IAAMA,GAAUC,EAAAA,EAAAA,IAAc,UAExBC,EAAW,IAAIC,EAAAA,GAAU,gDA0BhB,SAASC,IACtB,IAAMC,EAlBY,WAClB,IAAgCC,GAAAA,EAAAA,EAAAA,YAAzBD,EAAyBC,EAA0B,GAAzCC,EAAeD,EAA0B,GAa1D,OAXAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,IAAIC,EAAAA,EAAe,IAI1CC,OAAOC,QAAUH,EACjBF,EAAYE,KAGX,IAEIJ,EAIUQ,GAEXC,GAAaC,EAAAA,EAAAA,UAAQ,WAAM,WAAIC,EAAAA,GAAWhB,KAAU,IAEjDiB,GAAgBX,EAAAA,EAAAA,WAAkB,GAAM,GACfA,GAAAA,EAAAA,EAAAA,UAA2B,MAAtDY,EAA2BZ,EAAgC,GAAhDa,EAAgBb,EAAgC,GA4ClE,IA1CAE,EAAAA,EAAAA,YAAU,WACR,GAAKH,EAoCL,OAlCAA,EAASe,QAAQ,CAAEC,eAAe,IAAQC,OAAM,SAACC,OAIjDlB,EAASmB,GAAG,WAAW,SAACN,GACtBC,EAAaD,GACbD,GAAa,GACbQ,QAAQC,IAAK,aAAmC,OAArBR,EAAUS,gBAEvCtB,EAASmB,GAAG,cAAc,WACxBL,EAAa,MACbF,GAAa,GACbQ,QAAQC,IAAI,gCAEdrB,EAASmB,GAAG,kBAAkB,SAACN,GAC7BC,EAAaD,GACTA,EACFO,QAAQC,IAAK,wCAA+D,OAAb,OAATR,QAAAA,IAAAA,OAAAA,EAAAA,EAAWS,cAEjEF,QAAQC,IAAI,6CAOZrB,EACGe,UACAQ,MAAK,WAAMH,OAAAA,QAAQC,IAAI,gDACvBJ,OAAM,SAACC,GACNE,QAAQC,IAAK,0CAAuD,OAAZH,EAAIM,iBAI7D,WACAxB,EAASyB,gBAEf,CAACzB,KAECA,EACH,OAAM,SAAE0B,KAAE,C,SAAC,8BAGb,IAAMC,EAAgB,W,kBAAA,SAAS,I,0FAErB3B,EAASe,U,sDAEfK,QAAQQ,KAAK,EAAD,IACZR,QAAQC,IAAK,oBAAyC,OAApBQ,KAAKC,UAAU,EAAD,M,0GAL9B,GAShBC,EAAmB,W,kBAAA,SAAS,I,0FAExB/B,EAASyB,a,sDAEfL,QAAQQ,KAAK,EAAD,IACZR,QAAQC,IAAK,uBAA4C,OAApBQ,KAAKC,UAAU,EAAD,M,0GAL9B,GASnBE,EAA4B,WAChC,GAAKhC,EAASa,UAAd,CAEA,IAAMoB,GAAc,IAAIC,EAAAA,IAAcC,IACpCC,EAAAA,GAAAA,SAAuB,CACrBC,WAAYrC,EAASa,UACrByB,SAAUzC,EACV0C,SAAUC,EAAAA,GAAmB,OASjC,OANAP,EAAYQ,SAAWzC,EAASa,UAKhCoB,EAAYS,gBAhHM,+CAiHXT,IAGHU,EAAiB,W,kBAAA,SAAS,I,IAGxBC,E,oEAFD5C,EAASa,UAAW,C,uDACzBO,QAAQC,IAAI,sB,SACmBZ,EAAWkC,eAAe3C,EAASa,UAAW2B,EAAAA,I,cAAvEI,EAAmB,EAAH,KACtBxB,QAAQC,IAAI,0B,SACNZ,EAAWoC,mBAAmBD,G,OACpCxB,QAAQC,IAAI,sB,8FANS,GASjByB,EAAyB,W,kBAAA,SAAS,I,IAE9Bb,EAGEc,EAIFC,E,6EAPAf,EAAcD,IACF,C,gEAEUhC,EAAS8C,uBAAuBb,G,cAApDc,EAAS,OAATA,UAER3B,QAAQC,IAAI,qCAAsC0B,GAClD3B,QAAQC,IAAI,yB,UACSZ,EAAWoC,mBAAmBE,G,QAA7CC,EAAS,EAAH,KACZ5B,QAAQC,IAAI,0BAA2B2B,G,kDAEvC5B,QAAQQ,KAAK,EAAD,IACZR,QAAQC,IAAK,4BAAiD,OAApBQ,KAAKC,UAAU,EAAD,M,4GAb7B,GAiBzBmB,EAAkB,W,kBAAA,SAAS,I,IAEvBhB,EAGAiB,E,6EAHAjB,EAAcD,IACF,C,gEAEGhC,EAASiD,gBAAgBhB,G,OAAxCiB,EAAS,EAAH,KACZ9B,QAAQC,IAAI,uBAAwB8B,IAAAA,OAAcD,EAAOE,cACzDhC,QAAQiC,KAAK,qBAAsBH,EAAOI,oB,kDAS1ClC,QAAQQ,KAAK,EAAD,IACZR,QAAQC,IAAI,4BAA2B,M,4GAjBnB,GAqBlBkC,EAA2B,W,kBAAA,SAAS,I,IAED,EAA9BC,EAAcC,EAKbC,E,iGALmCC,QAAQC,IAAI,CACrD5B,IACAA,M,sBAFmC,GAGnC,gBAHKwB,EAA8B,EAGnC,GAHmBC,EAAgB,EAGnC,IACED,IAAgBC,EAAY,C,iCACXzD,EAAS6D,oBAAoB,CAACL,EAAcC,I,QAAzDC,EAAO,EAAH,KACVtC,QAAQC,IAAI,kCAAmCqC,GAC/CA,EAAKI,SAAQ,SAACC,GAAO3C,OAAAA,QAAQiC,KAAK,qBAAsBU,EAAGT,uB,0DAG7DlC,QAAQQ,KAAK,EAAD,IACZR,QAAQC,IAAI,qCAAoC,M,4GAbnB,GAiB3B2C,EAAc,W,kBAAA,SAAS,I,IAGnBC,EACAC,EAGAC,E,uEANQ,gB,SAERF,GAAO,IAAIG,aAAcC,OAFjB,iB,SAGIrE,EAASgE,YAAYC,EAAM,O,WAAvCC,EAAM,EAAH,MACAnB,UAAW,C,gDACpB3B,QAAQC,IAAI,mBAAoB6C,GAC1BC,EAAWG,IAAAA,KAAAA,SAAAA,OAA0BL,EAAMC,EAAInB,UAAWmB,EAAIrD,UAAU0D,WAC9EnD,QAAQC,IAAK,qBAAqB8C,G,kDAElC/C,QAAQQ,KAAK,EAAD,IACZR,QAAQC,IAAI,wBAAuB,M,4GAXnB,GAepB,OAAM,UACHmD,MAAG,C,WACAxE,IAAQ,SAAKyE,IAAC,CAACC,KAAM,2B,SAA4B,qC,SAClDC,OAAI,C,SACF3E,GAAYa,GAAS,sB,qBAEjB2D,MAAG,C,qBACDI,MAAG,C,UAAC,YAAUjF,M,UACdiF,MAAG,C,UAAC,iBAAe/D,EAAUS,kB,SAE/BuD,SAAM,CAACC,QAASnC,E,SAAgB,qB,SAChCkC,SAAM,CAACC,QAAShC,E,SAAwB,2B,SACxC+B,SAAM,CAACC,QAAS7B,E,SAAiB,uB,SACjC4B,SAAM,CAACC,QAASvB,E,SAA0B,2B,SAC1CsB,SAAM,CAACC,QAASd,E,SAAa,kB,SAC7Ba,SAAM,CAACC,QAAS,WAAM/C,OAAAA,K,SAAoB,mB,wCAI1C8C,SAAM,CAACC,QAAS,WAAMnD,OAAAA,K,SAAiB,+B","sources":["webpack://_N_E/./components/solana/SolanaExample.tsx"],"sourcesContent":["import { useState, useEffect, useMemo } from 'react';\nimport {\n  Connection,\n  PublicKey,\n  Transaction,\n  clusterApiUrl,\n  SystemProgram,\n  LAMPORTS_PER_SOL,\n} from '@solana/web3.js';\nimport { ProviderSolana } from '@onekeyfe/onekey-solana-provider';\nimport nacl from 'tweetnacl';\n\n// import { CustomBridge } from './bridge';\nimport base58 from 'bs58';\n\nconst NETWORK = clusterApiUrl('devnet');\n\nconst Receiver = new PublicKey('GWYfd2h4UhEb3hTj52M5jc6aefCKN2thnUkc5uk924kr');\nconst LastBlockHash = 'GLXLbuzf788BVk738RKcgNWftzGHwjzXzVPAxFDt8naQ';\n\ndeclare global {\n  interface Window {\n    _solana: ProviderSolana;\n  }\n}\n\nconst useProvider = () => {\n  const [provider, setProvider] = useState<ProviderSolana>();\n\n  useEffect(() => {\n    const solanaProvider = new ProviderSolana({\n      // use mock api provider bridge for development\n      // bridge: new CustomBridge(),\n    });\n    window._solana = solanaProvider;\n    setProvider(solanaProvider);\n\n    // setProvider(window.solana); // use injected solana for testing\n  }, []);\n\n  return provider;\n};\n\nexport default function App() {\n  const provider = useProvider();\n\n  const connection = useMemo(() => new Connection(NETWORK), []);\n\n  const [, setConnected] = useState<boolean>(false);\n  const [publicKey, setPublicKey] = useState<PublicKey | null>(null);\n\n  useEffect(() => {\n    if (!provider) return;\n    // try to eagerly connect\n    provider.connect({ onlyIfTrusted: true }).catch((err) => {\n      err;\n      // fail silently\n    });\n    provider.on('connect', (publicKey: PublicKey) => {\n      setPublicKey(publicKey);\n      setConnected(true);\n      console.log(`[connect] ${  publicKey.toBase58()}`);\n    });\n    provider.on('disconnect', () => {\n      setPublicKey(null);\n      setConnected(false);\n      console.log('[disconnect] ðŸ‘‹');\n    });\n    provider.on('accountChanged', (publicKey: PublicKey | null) => {\n      setPublicKey(publicKey);\n      if (publicKey) {\n        console.log(`[accountChanged] Switched account to ${  publicKey?.toBase58()}`);\n      } else {\n        console.log('[accountChanged] Switched unknown account');\n        // In this case, dapps could not to anything, or,\n        // Only re-connecting to the new account if it is trusted\n        // provider.connect({ onlyIfTrusted: true }).catch((err) => {\n        //   // fail silently\n        // });\n        // Or, always trying to reconnect\n        provider\n          .connect()\n          .then(() => console.log('[accountChanged] Reconnected successfully'))\n          .catch((err: Error) => {\n            console.log(`[accountChanged] Failed to re-connect: ${  err.message}`);\n          });\n      }\n    });\n    return () => {\n      void provider.disconnect();\n    };\n  }, [provider]);\n\n  if (!provider) {\n    return <h2>Could not find a provider</h2>;\n  }\n\n  const connectWallet = async () => {\n    try {\n      await provider.connect();\n    } catch (err) {\n      console.warn(err);\n      console.log(`[error] connect: ${  JSON.stringify(err)}`);\n    }\n  };\n\n  const disconnectWallet = async () => {\n    try {\n      await provider.disconnect();\n    } catch (err) {\n      console.warn(err);\n      console.log(`[error] disconnect: ${  JSON.stringify(err)}`);\n    }\n  };\n\n  const createTransferTransaction = () => {\n    if (!provider.publicKey) return;\n\n    const transaction = new Transaction().add(\n      SystemProgram.transfer({\n        fromPubkey: provider.publicKey,\n        toPubkey: Receiver,\n        lamports: LAMPORTS_PER_SOL / 100,\n      }),\n    );\n    transaction.feePayer = provider.publicKey;\n\n    // console.log('Getting recent blockhash');\n    // const { blockhash: lastBlockHash } = await connection.getLatestBlockhash();\n    // console.log('LastBlockHash: ', lastBlockHash);\n    transaction.recentBlockhash = LastBlockHash;\n    return transaction;\n  };\n\n  const requestAirdrop = async () => {\n    if (!provider.publicKey) return;\n    console.log('Requesting airdrop');\n    const airdropSignature = await connection.requestAirdrop(provider.publicKey, LAMPORTS_PER_SOL);\n    console.log('Waiting for airdrop...');\n    await connection.confirmTransaction(airdropSignature);\n    console.log('Airdrop confirmed!');\n  };\n\n  const signAndSendTransaction = async () => {\n    try {\n      const transaction = createTransferTransaction();\n      if (!transaction) return;\n\n      const { signature } = await provider.signAndSendTransaction(transaction);\n\n      console.log('Submitted transaction, signature: ', signature);\n      console.log('Awaiting confirmation');\n      const result = await connection.confirmTransaction(signature);\n      console.log('Transaction confirmed: ', result);\n    } catch (err) {\n      console.warn(err);\n      console.log(`[error] sendTransaction: ${  JSON.stringify(err)}`);\n    }\n  };\n\n  const signTransaction = async () => {\n    try {\n      const transaction = createTransferTransaction();\n      if (!transaction) return;\n\n      const signed = await provider.signTransaction(transaction);\n      console.log('Signed transaction: ', base58.encode(signed.serialize()));\n      console.info('Verify signature: ', signed.verifySignatures());\n\n      // // Send Transaction\n      // const signature = await connection.sendRawTransaction(signed.serialize());\n      // console.log('Submitted transaction: ', signature);\n      // console.log('Awaiting confirmation');\n      // await connection.confirmTransaction(signature);\n      // console.log('Transaction ' + signature + ' confirmed');\n    } catch (err) {\n      console.warn(err);\n      console.log('[error] signTransaction: ', err);\n    }\n  };\n\n  const signMultipleTransactions = async () => {\n    try {\n      const [transaction1, transaction2] = await Promise.all([\n        createTransferTransaction(),\n        createTransferTransaction(),\n      ]);\n      if (transaction1 && transaction2) {\n        const txns = await provider.signAllTransactions([transaction1, transaction2]);\n        console.log('signMultipleTransactions txns: ', txns);\n        txns.forEach((tx) => console.info('Verify signature: ', tx.verifySignatures()));\n      }\n    } catch (err) {\n      console.warn(err);\n      console.log('[error] signMultipleTransactions: ', err);\n    }\n  };\n\n  const signMessage = async () => {\n    const message = 'Hello, world!';\n    try {\n      const data = new TextEncoder().encode(message);\n      const res = await provider.signMessage(data, 'hex');\n      if (!res.signature) return;\n      console.log('Message signed: ', res);\n      const verified = nacl.sign.detached.verify(data, res.signature, res.publicKey.toBytes());\n      console.log(`Message verified: `, verified);\n    } catch (err) {\n      console.warn(err);\n      console.log('[error] signMessage: ', err);\n    }\n  };\n\n  return (\n    <div>\n      {!provider && <a href={'https://onekey.so/plugin'}>Install OneKey Extension â†’</a>}\n      <main>\n        {provider && publicKey ? (\n          <>\n            <div>\n              <pre>Network: {NETWORK}</pre>\n              <pre>Connected as: {publicKey.toBase58()}</pre>\n            </div>\n            <button onClick={requestAirdrop}>Request Airdrop</button>\n            <button onClick={signAndSendTransaction}>Sign&Send Transaction</button>\n            <button onClick={signTransaction}>Sign Transaction </button>\n            <button onClick={signMultipleTransactions}>Sign All Transactions</button>\n            <button onClick={signMessage}>Sign Message</button>\n            <button onClick={() => disconnectWallet()}>Disconnect</button>\n          </>\n        ) : (\n          <>\n            <button onClick={() => connectWallet()}>Connect to OneKey</button>\n          </>\n        )}\n      </main>\n    </div>\n  );\n}\n"],"names":["NETWORK","clusterApiUrl","Receiver","PublicKey","App","provider","useState","setProvider","useEffect","solanaProvider","ProviderSolana","window","_solana","useProvider","connection","useMemo","Connection","setConnected","publicKey","setPublicKey","connect","onlyIfTrusted","catch","err","on","console","log","toBase58","then","message","disconnect","h2","connectWallet","warn","JSON","stringify","disconnectWallet","createTransferTransaction","transaction","Transaction","add","SystemProgram","fromPubkey","toPubkey","lamports","LAMPORTS_PER_SOL","feePayer","recentBlockhash","requestAirdrop","airdropSignature","confirmTransaction","signAndSendTransaction","signature","result","signTransaction","signed","base58","serialize","info","verifySignatures","signMultipleTransactions","transaction1","transaction2","txns","Promise","all","signAllTransactions","forEach","tx","signMessage","data","res","verified","TextEncoder","encode","nacl","toBytes","div","a","href","main","pre","button","onClick"],"sourceRoot":""}