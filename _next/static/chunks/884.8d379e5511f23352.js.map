{"version":3,"file":"static/chunks/884.8d379e5511f23352.js","mappings":"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","sources":["webpack://_N_E/./components/near/NearExample.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/restrict-plus-operands,@typescript-eslint/ban-ts-comment */\nimport {\n  OneKeyNearProvider,\n  NearAccountsChangedPayload,\n  NearNetworkChangedPayload,\n  TransactionCreatorParams,\n  SignMessagesResult,\n  SignInResult,\n  SignTransactionsResult,\n} from '@onekeyfe/onekey-near-provider';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport * as NearApi from 'near-api-js';\nimport { random } from 'lodash';\nimport BN from 'bn.js';\n\nconst hasWindow = typeof window !== 'undefined';\n\ndeclare global {\n  interface Window {\n    provider: OneKeyNearProvider;\n    nearAPI: typeof NearApi;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    OneKeyNearProvider: any;\n  }\n}\n\nwindow.nearAPI = NearApi;\nwindow.OneKeyNearProvider = OneKeyNearProvider;\n\n// TODO mobile web\n// TODO Toggle debugLogger button\n// TODO 0.0.7\n\nfunction toBN(value: string | null | undefined) {\n  return new BN(value ?? '', 10);\n}\n\n// fix: Error: Class Action is missing in schema: actions.actions\nfunction transactionCreator({\n  accountId,\n  publicKey,\n  receiverId,\n  nonce,\n  actions,\n  blockHash,\n}: TransactionCreatorParams) {\n  const publicKeyBuffer = NearApi.utils.PublicKey.fromString(publicKey);\n  return NearApi.transactions.createTransaction(\n    accountId,\n    publicKeyBuffer,\n    receiverId,\n    nonce,\n    actions,\n    blockHash,\n  );\n}\n\nexport default function NearExample() {\n  const [provider, setProvider] = useState<OneKeyNearProvider | null>(null);\n  const [accountId, setAccountId] = useState('');\n  const [publicKey, setPublicKey] = useState('');\n  const [networkId, setNetworkId] = useState('');\n\n  const createSampleBatchTransactions = useCallback(async () => {\n    if (!provider) {\n      return [];\n    }\n    const num1 = random(100, 900) / 10000;\n    const num2 = random(100, 900) / 10000;\n    const action1 = NearApi.transactions.transfer(\n      toBN(NearApi.utils.format.parseNearAmount(`${num1  }`)),\n    );\n    const action2 = NearApi.transactions.transfer(\n      toBN(NearApi.utils.format.parseNearAmount(`${num2  }`)),\n    );\n    // TODO custom createTransaction, call near_accountNonce near_blockInfo\n    const tx1 = await provider.createTransaction({\n      receiverId: 'bitcoinzhuo.testnet',\n      actions: [action1, action2],\n      nonceOffset: 1,\n    });\n    const tx2 = await provider.createTransaction({\n      receiverId: 'evmzyz.testnet',\n      actions: [action2],\n      nonceOffset: 2,\n    });\n    const transactions = [tx1, tx2];\n    return transactions;\n  }, [provider]);\n\n  const onAccountsChanged = useCallback((payload: NearAccountsChangedPayload) => {\n    const _accountId = payload?.accounts?.[0]?.accountId || '';\n    const _publicKey = payload?.accounts?.[0]?.publicKey || '';\n    console.log('onAccountsChanged >>>', _accountId, _publicKey);\n    setAccountId(_accountId);\n    setPublicKey(_publicKey);\n  }, []);\n  const onNetworkChanged = useCallback((payload: NearNetworkChangedPayload) => {\n    console.log('onNetworkChanged >>>', payload);\n    setNetworkId(payload.networkId);\n  }, []);\n  const config = useMemo(\n    () => ({\n      // networkId: 'mainnet',\n      // nodeUrl: 'https://rpc.mainnet.near.org',\n      networkId: 'testnet',\n      nodeUrl: 'https://rpc.testnet.near.org',\n      headers: {},\n      keyStore: new NearApi.keyStores.BrowserLocalStorageKeyStore(),\n    }),\n    [],\n  );\n\n  useEffect(() => {\n    if (!hasWindow) {\n      // return;\n    }\n\n    // const near = new NearApi.Near(config);\n    // const connection = near.connection;\n    const _provider = new OneKeyNearProvider({\n      // connection,\n      // networkId: config.networkId,\n      // connectEagerly: true, // auto connect wallet accounts even if localStorage cleared\n      transactionCreator: process.env.NODE_ENV !== 'production' ? transactionCreator : undefined,\n      // logger: console,\n    });\n    _provider.on('accountsChanged', onAccountsChanged);\n    _provider.on('networkChanged', onNetworkChanged);\n\n    window.provider = _provider;\n\n    void (async () => {\n      const installed = await _provider.detectWalletInstalled();\n      if (installed) {\n        setProvider(_provider);\n\n        const res1 = (await _provider.request({\n          method: 'near_accounts',\n        })) as NearAccountsChangedPayload;\n        setAccountId(res1?.accounts?.[0]?.accountId || '');\n        setPublicKey(res1?.accounts?.[0]?.publicKey || '');\n        // setAccountId(provider.getAccountId());\n\n        const res2 = (await _provider.request({\n          method: 'near_networkInfo',\n        })) as NearNetworkChangedPayload;\n        setNetworkId(res2?.networkId || '');\n        // setNetworkId(provider.getNetworkInfo().networkId);\n      }\n    })();\n\n    return () => {\n      _provider.off('accountsChanged', onAccountsChanged);\n      _provider.off('networkChanged', onNetworkChanged);\n    };\n  }, [config, onAccountsChanged, onNetworkChanged]);\n\n  return (\n    <div>\n      {!provider && <a href={'https://onekey.so/plugin'}>Install OneKey Extension →</a>}\n      {provider && (\n        <div>\n          <div>\n            accountId: <strong>{accountId}</strong>\n          </div>\n          <div>\n            publicKey: <strong>{publicKey}</strong>\n          </div>\n          <div>\n            localNetworkId: <strong>{provider._networkId}</strong> <button>switch TODO</button>\n          </div>\n          <div>\n            walletNetworkId: <strong>{networkId}</strong>\n          </div>\n          <div>\n            providerVersion: <strong>v{provider.version}</strong>\n          </div>\n\n          <hr />\n          <button\n            onClick={async () => {\n              const res = (await provider?.request({\n                method: 'near_requestAccounts',\n              })) as SignInResult;\n              console.log('near_requestAccounts', res, res.accounts);\n            }}\n          >\n            near_requestAccounts\n          </button>\n          <button\n            onClick={async () => {\n              const res = await provider?.requestSignIn();\n              console.log('requestSignIn', res, res.accounts);\n            }}\n          >\n            requestSignIn\n          </button>\n\n          <hr />\n          <button onClick={() => provider?.request({ method: 'near_signOut' })}>\n            near_signOut\n          </button>\n          <button onClick={() => provider?.signOut()}>signOut</button>\n\n          <hr />\n          <button\n            onClick={async () => {\n              const res = (await provider?.request({\n                method: 'near_accounts',\n                params: [],\n              })) as NearAccountsChangedPayload;\n              console.log('near_accounts', res, res.accounts);\n            }}\n          >\n            near_accounts\n          </button>\n          <button\n            onClick={async () => {\n              const res = (await provider?.request({\n                method: 'near_networkInfo',\n                params: [],\n              })) as NearNetworkChangedPayload;\n              console.log('near_networkInfo', res, res.networkId);\n            }}\n          >\n            near_networkInfo\n          </button>\n          <button\n            onClick={async () => {\n              const res = await provider?.request({\n                method: 'near_accountNonce',\n                params: [],\n              });\n              console.log('near_accountNonce', res);\n            }}\n          >\n            near_accountNonce\n          </button>\n          <button\n            onClick={async () => {\n              const res = await provider?.request({\n                method: 'near_blockInfo',\n                params: [],\n              });\n              console.log('near_blockInfo', res);\n            }}\n          >\n            near_blockInfo\n          </button>\n\n          <hr />\n          <div>\n            <button\n              onClick={async () => {\n                const transactions = await createSampleBatchTransactions();\n                const res = (await provider.request({\n                  method: 'near_sendTransactions',\n                  params: {\n                    transactions,\n                  },\n                })) as SignTransactionsResult;\n                console.log('near_sendTransactions', res, res.transactionHashes);\n              }}\n            >\n              near_sendTransactions\n            </button>\n            <button\n              onClick={async () => {\n                const transactions = await createSampleBatchTransactions();\n                const res = await provider.requestSignTransactions({\n                  transactions,\n                });\n                console.log('requestSignTransactions', res, res.transactionHashes);\n              }}\n            >\n              requestSignTransactions\n            </button>\n            <button\n              onClick={async () => {\n                const transactions = await createSampleBatchTransactions();\n                const res = (await provider.request({\n                  method: 'near_signTransactions',\n                  params: {\n                    transactions,\n                  },\n                })) as SignMessagesResult;\n                console.log('near_signTransactions', res, res.signatures);\n              }}\n            >\n              near_signTransactions\n            </button>\n            <button>TODO Send USDT Token (mainnet only)</button>\n            <button\n              onClick={async () => {\n                const num1 = random(100, 900) / 10000;\n                const num2 = random(100, 900) / 10000;\n                const amount = NearApi.utils.format.parseNearAmount(num1.toString());\n                const action1 = NearApi.transactions.transfer(toBN(amount));\n                const action2 = NearApi.transactions.transfer(\n                  toBN(NearApi.utils.format.parseNearAmount(num2.toString())),\n                );\n                const acc = provider.account();\n                const res = await acc.signAndSendTransaction({\n                  receiverId: 'evmzyz.testnet',\n                  actions: [action1, action2],\n                });\n                console.log('signAndSendTransaction', res, res.status);\n              }}\n            >\n              signAndSendTransaction (legacy)\n            </button>\n\n            <hr />\n            <button\n              onClick={async () => {\n                const res = (await provider.request({\n                  method: 'near_signMessages',\n                  params: {\n                    messages: ['hello world', 'onekey near wallet'],\n                  },\n                })) as SignMessagesResult;\n                console.log('near_signMessages', res, res.signatures);\n              }}\n            >\n              near_signMessages\n            </button>\n            <button\n              onClick={async () => {\n                const res = await provider.requestSignMessages({\n                  messages: ['hello world', 'onekey near wallet'],\n                });\n                console.log('requestSignMessages', res, res.signatures);\n              }}\n            >\n              requestSignMessages\n            </button>\n\n            <hr />\n            <button\n              onClick={async () => {\n                const res = await provider.request({\n                  'method': 'query',\n                  'params': {\n                    'request_type': 'view_access_key_list',\n                    'account_id':\n                      'c3be856133196da252d0f1083614cdc87a85c8aa8abeaf87daff1520355eec53',\n                    'finality': 'optimistic',\n                  },\n                });\n                console.log('RPC Call: view_access_key_list', res);\n              }}\n            >\n              RPC Call: view_access_key_list\n            </button>\n            <button\n              onClick={async () => {\n                const res = await provider.request({\n                  'method': 'gas_price',\n                  'params': [null],\n                });\n                console.log('RPC Call: gas_price', res);\n              }}\n            >\n              RPC Call: gas_price\n            </button>\n            <button\n              onClick={async () => {\n                const res = await provider.request({\n                  'method': 'status',\n                  'params': [],\n                });\n                console.log('RPC Call: status', res);\n              }}\n            >\n              RPC Call: status\n            </button>\n            <button\n              onClick={async () => {\n                const res = await provider.request({\n                  'method': 'network_info',\n                  'params': [],\n                });\n                console.log('RPC Call: network_info', res);\n              }}\n            >\n              RPC Call: network_info\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":["toBN","value","BN","NearExample","useState","provider","setProvider","accountId","setAccountId","publicKey","setPublicKey","networkId","setNetworkId","createSampleBatchTransactions","useCallback","num1","num2","action1","action2","tx1","tx2","transactions","random","NearApi","createTransaction","receiverId","actions","nonceOffset","onAccountsChanged","payload","_accountId","accounts","_publicKey","console","log","onNetworkChanged","config","useMemo","nodeUrl","headers","keyStore","useEffect","_provider","OneKeyNearProvider","transactionCreator","undefined","on","window","res1","res2","detectWalletInstalled","request","method","off","div","a","href","strong","_networkId","button","version","hr","onClick","res","requestSignIn","signOut","params","transactionHashes","requestSignTransactions","signatures","amount","acc","toString","account","signAndSendTransaction","status","messages","requestSignMessages","nearAPI"],"sourceRoot":""}