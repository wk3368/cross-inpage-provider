{"version":3,"file":"static/chunks/8015bd09.ecc16c69949bba4f.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@solana/web3.js/lib/index.browser.esm.js"],"sourcesContent":["import nacl from 'tweetnacl';\nimport { Buffer as Buffer$1 } from 'buffer';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { blob } from '@solana/buffer-layout';\nimport { coerce, instance, string, tuple, literal, unknown, union, type, optional, any, number, array, nullable, create, boolean, record, assert as assert$7 } from 'superstruct';\nimport { Client } from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nconst toBuffer = arr => {\n  if (Buffer$1.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer$1.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer$1.from(arr);\n  }\n};\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nvar hash$1 = {};\n\nvar utils$9 = {};\n\nvar minimalisticAssert = assert$6;\n\nfunction assert$6(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert$6.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n\nvar inherits_browser = {exports: {}};\n\nif (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  inherits_browser.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor;\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n    }\n  };\n} else {\n  // old school shim for old browsers\n  inherits_browser.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor;\n      var TempCtor = function () {};\n      TempCtor.prototype = superCtor.prototype;\n      ctor.prototype = new TempCtor();\n      ctor.prototype.constructor = ctor;\n    }\n  };\n}\n\nvar assert$5 = minimalisticAssert;\nvar inherits = inherits_browser.exports;\n\nutils$9.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nutils$9.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nutils$9.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nutils$9.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nutils$9.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nutils$9.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nutils$9.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert$5(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nutils$9.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nutils$9.split32 = split32;\n\nfunction rotr32$1(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nutils$9.rotr32 = rotr32$1;\n\nfunction rotl32$2(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nutils$9.rotl32 = rotl32$2;\n\nfunction sum32$3(a, b) {\n  return (a + b) >>> 0;\n}\nutils$9.sum32 = sum32$3;\n\nfunction sum32_3$1(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nutils$9.sum32_3 = sum32_3$1;\n\nfunction sum32_4$2(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nutils$9.sum32_4 = sum32_4$2;\n\nfunction sum32_5$2(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nutils$9.sum32_5 = sum32_5$2;\n\nfunction sum64$1(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nutils$9.sum64 = sum64$1;\n\nfunction sum64_hi$1(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nutils$9.sum64_hi = sum64_hi$1;\n\nfunction sum64_lo$1(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nutils$9.sum64_lo = sum64_lo$1;\n\nfunction sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nutils$9.sum64_4_hi = sum64_4_hi$1;\n\nfunction sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nutils$9.sum64_4_lo = sum64_4_lo$1;\n\nfunction sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nutils$9.sum64_5_hi = sum64_5_hi$1;\n\nfunction sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nutils$9.sum64_5_lo = sum64_5_lo$1;\n\nfunction rotr64_hi$1(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nutils$9.rotr64_hi = rotr64_hi$1;\n\nfunction rotr64_lo$1(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nutils$9.rotr64_lo = rotr64_lo$1;\n\nfunction shr64_hi$1(ah, al, num) {\n  return ah >>> num;\n}\nutils$9.shr64_hi = shr64_hi$1;\n\nfunction shr64_lo$1(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nutils$9.shr64_lo = shr64_lo$1;\n\nvar common$5 = {};\n\nvar utils$8 = utils$9;\nvar assert$4 = minimalisticAssert;\n\nfunction BlockHash$4() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\ncommon$5.BlockHash = BlockHash$4;\n\nBlockHash$4.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils$8.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils$8.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash$4.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert$4(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash$4.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n\nvar sha = {};\n\nvar common$4 = {};\n\nvar utils$7 = utils$9;\nvar rotr32 = utils$7.rotr32;\n\nfunction ft_1$1(s, x, y, z) {\n  if (s === 0)\n    return ch32$1(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32$1(x, y, z);\n}\ncommon$4.ft_1 = ft_1$1;\n\nfunction ch32$1(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\ncommon$4.ch32 = ch32$1;\n\nfunction maj32$1(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\ncommon$4.maj32 = maj32$1;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\ncommon$4.p32 = p32;\n\nfunction s0_256$1(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\ncommon$4.s0_256 = s0_256$1;\n\nfunction s1_256$1(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\ncommon$4.s1_256 = s1_256$1;\n\nfunction g0_256$1(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\ncommon$4.g0_256 = g0_256$1;\n\nfunction g1_256$1(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\ncommon$4.g1_256 = g1_256$1;\n\nvar utils$6 = utils$9;\nvar common$3 = common$5;\nvar shaCommon$1 = common$4;\n\nvar rotl32$1 = utils$6.rotl32;\nvar sum32$2 = utils$6.sum32;\nvar sum32_5$1 = utils$6.sum32_5;\nvar ft_1 = shaCommon$1.ft_1;\nvar BlockHash$3 = common$3.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash$3.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils$6.inherits(SHA1, BlockHash$3);\nvar _1 = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32$1(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32$2(this.h[0], a);\n  this.h[1] = sum32$2(this.h[1], b);\n  this.h[2] = sum32$2(this.h[2], c);\n  this.h[3] = sum32$2(this.h[3], d);\n  this.h[4] = sum32$2(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils$6.toHex32(this.h, 'big');\n  else\n    return utils$6.split32(this.h, 'big');\n};\n\nvar utils$5 = utils$9;\nvar common$2 = common$5;\nvar shaCommon = common$4;\nvar assert$3 = minimalisticAssert;\n\nvar sum32$1 = utils$5.sum32;\nvar sum32_4$1 = utils$5.sum32_4;\nvar sum32_5 = utils$5.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash$2 = common$2.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256$1() {\n  if (!(this instanceof SHA256$1))\n    return new SHA256$1();\n\n  BlockHash$2.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils$5.inherits(SHA256$1, BlockHash$2);\nvar _256 = SHA256$1;\n\nSHA256$1.blockSize = 512;\nSHA256$1.outSize = 256;\nSHA256$1.hmacStrength = 192;\nSHA256$1.padLength = 64;\n\nSHA256$1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert$3(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32$1(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32$1(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32$1(T1, T2);\n  }\n\n  this.h[0] = sum32$1(this.h[0], a);\n  this.h[1] = sum32$1(this.h[1], b);\n  this.h[2] = sum32$1(this.h[2], c);\n  this.h[3] = sum32$1(this.h[3], d);\n  this.h[4] = sum32$1(this.h[4], e);\n  this.h[5] = sum32$1(this.h[5], f);\n  this.h[6] = sum32$1(this.h[6], g);\n  this.h[7] = sum32$1(this.h[7], h);\n};\n\nSHA256$1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils$5.toHex32(this.h, 'big');\n  else\n    return utils$5.split32(this.h, 'big');\n};\n\nvar utils$4 = utils$9;\nvar SHA256 = _256;\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils$4.inherits(SHA224, SHA256);\nvar _224 = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils$4.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils$4.split32(this.h.slice(0, 7), 'big');\n};\n\nvar utils$3 = utils$9;\nvar common$1 = common$5;\nvar assert$2 = minimalisticAssert;\n\nvar rotr64_hi = utils$3.rotr64_hi;\nvar rotr64_lo = utils$3.rotr64_lo;\nvar shr64_hi = utils$3.shr64_hi;\nvar shr64_lo = utils$3.shr64_lo;\nvar sum64 = utils$3.sum64;\nvar sum64_hi = utils$3.sum64_hi;\nvar sum64_lo = utils$3.sum64_lo;\nvar sum64_4_hi = utils$3.sum64_4_hi;\nvar sum64_4_lo = utils$3.sum64_4_lo;\nvar sum64_5_hi = utils$3.sum64_5_hi;\nvar sum64_5_lo = utils$3.sum64_5_lo;\n\nvar BlockHash$1 = common$1.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512$1() {\n  if (!(this instanceof SHA512$1))\n    return new SHA512$1();\n\n  BlockHash$1.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils$3.inherits(SHA512$1, BlockHash$1);\nvar _512 = SHA512$1;\n\nSHA512$1.blockSize = 1024;\nSHA512$1.outSize = 512;\nSHA512$1.hmacStrength = 192;\nSHA512$1.padLength = 128;\n\nSHA512$1.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512$1.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert$2(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512$1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils$3.toHex32(this.h, 'big');\n  else\n    return utils$3.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nvar utils$2 = utils$9;\n\nvar SHA512 = _512;\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils$2.inherits(SHA384, SHA512);\nvar _384 = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils$2.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils$2.split32(this.h.slice(0, 12), 'big');\n};\n\nsha.sha1 = _1;\nsha.sha224 = _224;\nsha.sha256 = _256;\nsha.sha384 = _384;\nsha.sha512 = _512;\n\nvar ripemd = {};\n\nvar utils$1 = utils$9;\nvar common = common$5;\n\nvar rotl32 = utils$1.rotl32;\nvar sum32 = utils$1.sum32;\nvar sum32_3 = utils$1.sum32_3;\nvar sum32_4 = utils$1.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils$1.inherits(RIPEMD160, BlockHash);\nripemd.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils$1.toHex32(this.h, 'little');\n  else\n    return utils$1.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n\nvar utils = utils$9;\nvar assert$1 = minimalisticAssert;\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nvar hmac = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert$1(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n\n(function (exports) {\nvar hash = exports;\n\nhash.utils = utils$9;\nhash.common = common$5;\nhash.sha = sha;\nhash.ripemd = ripemd;\nhash.hmac = hmac;\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n}(hash$1));\n\nvar hash = hash$1;\n\nconst version$2 = \"logger/5.6.0\";\n\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nvar LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nvar ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\nconst HEX = \"0123456789abcdef\";\nclass Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version$2);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n\nconst version$1 = \"bytes/5.6.0\";\n\nconst logger = new Logger(version$1);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nfunction isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nfunction isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\n\nconst version = \"sha2/5.6.0\";\n\nnew Logger(version);\nfunction sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\n\nclass Struct {\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n\n  encode() {\n    return Buffer$1.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data) {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data) {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n\n} // Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\n\nclass Enum extends Struct {\n  constructor(properties) {\n    super(properties);\n    this.enum = '';\n\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n\n}\nconst SOLANA_SCHEMA = new Map();\n\n/**\n * Maximum length of derived pubkey seed\n */\n\nconst MAX_SEED_LENGTH = 32;\n/**\n * Value to be converted into public key\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\n/**\n * A public key\n */\n\n\nclass PublicKey extends Struct {\n  /** @internal */\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    super({});\n    this._bn = void 0;\n\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n  /**\n   * Default public key value. (All zeros)\n   */\n\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n\n  toBase58() {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON() {\n    return this.toBase58();\n  }\n  /**\n   * Return the byte array representation of the public key\n   */\n\n\n  toBytes() {\n    return this.toBuffer();\n  }\n  /**\n   * Return the Buffer representation of the public key\n   */\n\n\n  toBuffer() {\n    const b = this._bn.toArrayLike(Buffer$1);\n\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer$1.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n\n  toString() {\n    return this.toBase58();\n  }\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n\n  /* eslint-disable require-await */\n\n\n  static async createWithSeed(fromPublicKey, seed, programId) {\n    const buffer = Buffer$1.concat([fromPublicKey.toBuffer(), Buffer$1.from(seed), programId.toBuffer()]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer$1.from(hash, 'hex'));\n  }\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n\n  /* eslint-disable require-await */\n\n\n  static createProgramAddressSync(seeds, programId) {\n    let buffer = Buffer$1.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n\n      buffer = Buffer$1.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer$1.concat([buffer, programId.toBuffer(), Buffer$1.from('ProgramDerivedAddress')]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n\n    return new PublicKey(publicKeyBytes);\n  }\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n\n  /* eslint-disable require-await */\n\n\n  static async createProgramAddress(seeds, programId) {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n\n\n  static findProgramAddressSync(seeds, programId) {\n    let nonce = 255;\n    let address;\n\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer$1.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n\n        nonce--;\n        continue;\n      }\n\n      return [address, nonce];\n    }\n\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n\n\n  static async findProgramAddress(seeds, programId) {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n\n\n  static isOnCurve(pubkeyData) {\n    const pubkey = new PublicKey(pubkeyData);\n    return is_on_curve(pubkey.toBytes()) == 1;\n  }\n\n}\nPublicKey.default = new PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n}); // @ts-ignore\n\nlet naclLowLevel = nacl.lowlevel; // Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\n\nfunction is_on_curve(p) {\n  var r = [naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf()];\n  var t = naclLowLevel.gf(),\n      chk = naclLowLevel.gf(),\n      num = naclLowLevel.gf(),\n      den = naclLowLevel.gf(),\n      den2 = naclLowLevel.gf(),\n      den4 = naclLowLevel.gf(),\n      den6 = naclLowLevel.gf();\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\n\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);\n\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32),\n      d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\n\nclass Account {\n  /** @internal */\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    this._keypair = void 0;\n\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n  /**\n   * The public key for this account\n   */\n\n\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n  /**\n   * The **unencrypted** secret key for this account\n   */\n\n\n  get secretKey() {\n    return toBuffer(this._keypair.secretKey);\n  }\n\n}\n\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst SIGNATURE_LENGTH_IN_BYTES = 64;\n\n/**\n * Layout for a public key\n */\n\nconst publicKey = (property = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nconst rustString = (property = 'string') => {\n  const rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n\n  const _decode = rsl.decode.bind(rsl);\n\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl;\n\n  rslShim.decode = (b, offset) => {\n    const data = _decode(b, offset);\n\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str, b, offset) => {\n    const data = {\n      chars: Buffer$1.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = str => {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer$1.from(str, 'utf8').length;\n  };\n\n  return rslShim;\n};\n/**\n * Layout for an Authorized object\n */\n\nconst authorized = (property = 'authorized') => {\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n/**\n * Layout for a Lockup object\n */\n\nconst lockup = (property = 'lockup') => {\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n/**\n *  Layout for a VoteInit object\n */\n\nconst voteInit = (property = 'voteInit') => {\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\nfunction getAlloc(type, fields) {\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n\n  return len;\n}\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n\n/**\n * The message header, identifying signed and read-only account\n */\n\nconst PUBKEY_LENGTH = 32;\n/**\n * List of instructions to be processed atomically\n */\n\nclass Message {\n  constructor(args) {\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));\n  }\n\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index) {\n    return index < this.header.numRequiredSignatures - this.header.numReadonlySignedAccounts || index >= this.header.numRequiredSignatures && index < this.accountKeys.length - this.header.numReadonlyUnsignedAccounts;\n  }\n\n  isProgramId(index) {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds() {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds() {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts,\n        programIdIndex\n      } = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer$1.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer$1.from(dataCount),\n        data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer$1.alloc(PACKET_DATA_SIZE);\n    Buffer$1.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: Buffer$1.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer$1.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer$1.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: Buffer$1.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash)\n    };\n    let signData = Buffer$1.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n  /**\n   * Decode a compiled message into a Message object.\n   */\n\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const numRequiredSignatures = byteArray.shift();\n    const numReadonlySignedAccounts = byteArray.shift();\n    const numReadonlyUnsignedAccounts = byteArray.shift();\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer$1.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift();\n      const accountCount = decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer$1.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58.encode(Buffer$1.from(recentBlockhash)),\n      accountKeys,\n      instructions\n    };\n    return new Message(messageArgs);\n  }\n\n}\n\nfunction assert (condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer$1.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * Transaction Instruction class\n */\nclass TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n\n  /**\n   * Program Id to execute\n   */\n\n  /**\n   * Program input\n   */\n  constructor(opts) {\n    this.keys = void 0;\n    this.programId = void 0;\n    this.data = Buffer$1.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  toJSON() {\n    return {\n      keys: this.keys.map(({\n        pubkey,\n        isSigner,\n        isWritable\n      }) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data]\n    };\n  }\n\n}\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * Transaction class\n */\nclass Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n\n    return null;\n  }\n  /**\n   * The transaction fee payer\n   */\n\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts) {\n    this.signatures = [];\n    this.feePayer = void 0;\n    this.instructions = [];\n    this.recentBlockhash = void 0;\n    this.nonceInfo = void 0;\n    this._message = void 0;\n    this._json = void 0;\n    opts && Object.assign(this, opts);\n  }\n  /**\n   * @internal\n   */\n\n\n  toJSON() {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo ? {\n        nonce: this.nonceInfo.nonce,\n        nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n      } : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({\n        publicKey\n      }) => {\n        return publicKey.toJSON();\n      })\n    };\n  }\n  /**\n   * Add one or more instructions to this Transaction\n   */\n\n\n  add(...items) {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n  /**\n   * Compile transaction data\n   */\n\n\n  compileMessage() {\n    if (this._message) {\n      if (JSON.stringify(this.toJSON()) !== JSON.stringify(this._json)) {\n        throw new Error('Transaction message mutated after being populated from Message');\n      }\n\n      return this._message;\n    }\n\n    const {\n      nonceInfo\n    } = this;\n\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n\n    const {\n      recentBlockhash\n    } = this;\n\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer;\n\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(`Transaction instruction index ${i} has undefined program id`);\n      }\n    }\n\n    const programIds = [];\n    const accountMetas = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({ ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    }); // Append programID account metas\n\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    }); // Sort. Prioritizing first by signer, then by writable\n\n    accountMetas.sort(function (x, y) {\n      const pubkeySorting = x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable = x.isWritable === y.isWritable ? pubkeySorting : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    }); // Cull duplicate account metas\n\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    }); // Move fee payer to the front\n\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    } // Disallow unknown signers\n\n\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0; // Split out signing from non-signing keys and count header values\n\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(({\n      pubkey,\n      isSigner,\n      isWritable\n    }) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        data,\n        programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58.encode(data)\n      };\n    });\n    instructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n    return message;\n  }\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n\n\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n\n\n  async getEstimatedFee(connection) {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n\n\n  setSigners(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n  }\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n\n\n  sign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n\n    const seen = new Set();\n    const uniqueSigners = [];\n\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n\n    const message = this._compile();\n\n    this._partialSign(message, ...uniqueSigners);\n\n    this._verifySignatures(message.serialize(), true);\n  }\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n\n\n  partialSign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n\n    const seen = new Set();\n    const uniqueSigners = [];\n\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n\n    this._partialSign(message, ...uniqueSigners);\n  }\n  /**\n   * @internal\n   */\n\n\n  _partialSign(message, ...signers) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n\n\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n\n\n    this._addSignature(pubkey, signature);\n  }\n  /**\n   * @internal\n   */\n\n\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer$1.from(signature);\n  }\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n\n\n  verifySignatures() {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n  /**\n   * @internal\n   */\n\n\n  _verifySignatures(signData, requireAllSignatures) {\n    for (const {\n      signature,\n      publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n\n\n  serialize(config) {\n    const {\n      requireAllSignatures,\n      verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n\n    if (verifySignatures && !this._verifySignatures(signData, requireAllSignatures)) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n  /**\n   * @internal\n   */\n\n\n  _serialize(signData) {\n    const {\n      signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer$1.alloc(transactionLength);\n    assert(signatures.length < 256);\n    Buffer$1.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({\n      signature\n    }, index) => {\n      if (signature !== null) {\n        assert(signature.length === 64, `signature has invalid length`);\n        Buffer$1.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);\n    return wireTransaction;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer$1.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n  /**\n   * Populate Transaction object from message and signatures\n   */\n\n\n  static populate(message, signatures = []) {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58.decode(instruction.data)\n      }));\n    });\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n    return transaction;\n  }\n\n}\n\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nconst SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nasync function sendAndConfirmTransaction(connection, transaction, signers, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries\n  };\n  const signature = await connection.sendTransaction(transaction, signers, sendOptions);\n  const status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n\n  if (status.err) {\n    throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n\n  return signature;\n}\n\n// zzz\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nconst encodeDecode = (layout) => {\n    const decode = layout.decode.bind(layout);\n    const encode = layout.encode.bind(layout);\n    return { decode, encode };\n};\n\nvar browser = {};\n\nObject.defineProperty(browser, \"__esModule\", { value: true });\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n}\nvar toBigIntLE_1 = browser.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n}\nbrowser.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n}\nvar toBufferLE_1 = browser.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n}\nbrowser.toBufferBE = toBufferBE;\n\nconst bigInt = (length) => (property) => {\n    const layout = blob(length, property);\n    const { encode, decode } = encodeDecode(layout);\n    const bigIntLayout = layout;\n    bigIntLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return toBigIntLE_1(Buffer.from(src));\n    };\n    bigIntLayout.encode = (bigInt, buffer, offset) => {\n        const src = toBufferLE_1(bigInt, length);\n        return encode(src, buffer, offset);\n    };\n    return bigIntLayout;\n};\nconst u64 = bigInt(8);\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = Buffer$1.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\n\nfunction decodeData(type, buffer) {\n  let data;\n\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);\n  }\n\n  return data;\n}\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\n\nconst FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n/**\n * Calculator for transaction fees.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\n\nconst NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * NonceAccount class\n */\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n\n\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n\n}\n\n/**\n * Create account system transaction params\n */\n\n/**\n * System Instruction class\n */\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports,\n      space,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports,\n      seed,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space\n    };\n  }\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      space,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base,\n      seed,\n      lamports,\n      space,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports'), rustString('seed'), publicKey('programId')])\n  }\n});\n/**\n * Factory class for transactions to interact with the System program\n */\n\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the System program\n   */\n\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n\n\n  static transfer(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports)\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n\n\n  static assign(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n\n\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n\n\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n\n\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n\n\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n\n\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n\n\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n\n\n  static allocate(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n}\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111');\n\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\n\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n/**\n * Program loader interface\n */\n\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return 2 * ( // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 + // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n\n  static async load(connection, payer, program, programId, data) {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length); // Fetch program account info to check if it has already been created\n\n      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');\n      let transaction = null;\n\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.allocate({\n            accountPubkey: program.publicKey,\n            space: data.length\n          }));\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.assign({\n            accountPubkey: program.publicKey,\n            programId\n          }));\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: program.publicKey,\n            lamports: balanceNeeded - programInfo.lamports\n          }));\n        }\n      } else {\n        transaction = new Transaction().add(SystemProgram.createAccount({\n          fromPubkey: payer.publicKey,\n          newAccountPubkey: program.publicKey,\n          lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n          space: data.length,\n          programId\n        }));\n      } // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n\n\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        });\n      }\n    }\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer$1.alloc(chunkSize + 16);\n      dataLayout.encode({\n        instruction: 0,\n        // Load instruction\n        offset,\n        bytes: bytes,\n        bytesLength: 0,\n        bytesLengthPadding: 0\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId,\n        data\n      });\n      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      })); // Delay between sends in an attempt to reduce rate limit errors\n\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n\n    await Promise.all(transactions); // Finalize the account loaded with program data for execution\n\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n      const data = Buffer$1.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 1 // Finalize instruction\n\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId,\n        data\n      });\n      await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      });\n    } // success\n\n    return true;\n  }\n\n}\nLoader.chunkSize = CHUNK_SIZE;\n\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n/**\n * Factory class for transactions to interact with a program loader\n */\n\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n\n}\n\n/**\n * Compute Budget Instruction class\n */\n\nclass ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n\n\n  static decodeRequestUnits(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units,\n      additionalFee\n    } = decodeData(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data);\n    return {\n      units,\n      additionalFee\n    };\n  }\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n\n\n  static decodeRequestHeapFrame(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      bytes\n    } = decodeData(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data);\n    return {\n      bytes\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error('invalid instruction; programId is not ComputeBudgetProgram');\n    }\n  }\n\n}\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nconst COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units'), BufferLayout.u32('additionalFee')])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')])\n  }\n});\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\n\nclass ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n\n\n  static requestUnits(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n\n  static requestHeapFrame(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n\n}\nComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');\n\nvar browserPonyfill = {exports: {}};\n\n(function (module, exports) {\nvar global = typeof self !== 'undefined' ? self : commonjsGlobal;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException;\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\n((function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n}))({});\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch; // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch; // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch; // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers;\nexports.Request = ctx.Request;\nexports.Response = ctx.Response;\nmodule.exports = exports;\n}(browserPonyfill, browserPonyfill.exports));\n\nvar crossFetch = /*@__PURE__*/getDefaultExportFromCjs(browserPonyfill.exports);\n\nvar objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nvar fastStableStringify = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n\nvar fastStableStringify$1 = fastStableStringify;\n\nconst MINIMUM_SLOT_PER_EPOCH = 32; // Returns the number of trailing zeros in the binary representation of self.\n\nfunction trailingZeros(n) {\n  let trailingZeros = 0;\n\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n\n  return trailingZeros;\n} // Returns the smallest power of two greater than or equal to n\n\n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\n\n\nclass EpochSchedule {\n  /** The maximum number of slots in each epoch */\n\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n\n  /** Indicates whether epochs start short and grow */\n\n  /** The first epoch with `slotsPerEpoch` slots */\n\n  /** The first slot of `firstNormalEpoch` */\n  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    this.slotsPerEpoch = void 0;\n    this.leaderScheduleSlotOffset = void 0;\n    this.warmup = void 0;\n    this.firstNormalEpoch = void 0;\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot) {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot) {\n    if (slot < this.firstNormalSlot) {\n      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch) {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n    }\n  }\n\n  getLastSlotInEpoch(epoch) {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n\n}\n\nclass SendTransactionError extends Error {\n  constructor(message, logs) {\n    super(message);\n    this.logs = void 0;\n    this.logs = logs;\n  }\n\n}\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nconst NUM_TICKS_PER_SECOND = 160;\n/**\n * @internal\n */\n\nconst DEFAULT_TICKS_PER_SLOT = 64;\n/**\n * @internal\n */\n\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n/**\n * @internal\n */\n\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n\nfunction promiseTimeout(promise, timeoutMs) {\n  let timeoutId;\n  const timeoutPromise = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n  return Promise.race([promise, timeoutPromise]).then(result => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n\nfunction makeWebsocketUrl(endpoint) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = ''; // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n\n  return url.toString();\n}\n\nconst PublicKeyFromString = coerce(instance(PublicKey), string(), value => new PublicKey(value));\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\nconst BufferFromRawAccountData = coerce(instance(Buffer$1), RawAccountDataResult, value => Buffer$1.from(value[0], 'base64'));\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\n\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\n\n/**\n * @internal\n */\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n/**\n * @internal\n */\n\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return { ...value,\n        result: create(value.result, schema)\n      };\n    }\n  });\n}\n/**\n * @internal\n */\n\n\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value\n  }));\n}\n/**\n * @internal\n */\n\n\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value\n  });\n}\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n\nconst GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number()\n}))));\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nconst GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n/**\n * Transaction error or null\n */\n\nconst TransactionErrorResult = nullable(union([type({}), string()]));\n/**\n * Signature status for a transaction\n */\n\nconst SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n/**\n * Transaction signature received notification\n */\n\nconst SignatureReceivedResult = literal('receivedSignature');\n/**\n * Version info for a node\n */\n\nconst VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number())\n}));\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, useHttps, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit) {\n  const fetch = customFetch ? customFetch : crossFetch;\n\n  let fetchWithMiddleware;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (url, options) => {\n      const modifiedFetchArgs = await new Promise((resolve, reject) => {\n        try {\n          fetchMiddleware(url, options, (modifiedUrl, modifiedOptions) => resolve([modifiedUrl, modifiedOptions]));\n        } catch (error) {\n          reject(error);\n        }\n      });\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, httpHeaders || {})\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res;\n      let waitTime = 500;\n\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429\n        /* Too many requests */\n        ) {\n          break;\n        }\n\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n\n        too_many_requests_retries -= 1;\n\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n\n        console.log(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n    }\n  }, {});\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\n\n\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\n\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\n\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\n\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\n\nconst SlotRpcResult = jsonRpcResult(number());\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\n\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nconst ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\n\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n/**\n * @internal\n */\n\nconst AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n/**\n * @internal\n */\n\nconst KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = coerce(union([instance(Buffer$1), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nconst KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n/**\n * @internal\n */\n\nconst StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\n\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\n\nconst AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\n\nconst ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\n\nconst SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\n\nconst SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\n\nconst SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\n\nconst RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nconst ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nconst VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\n\nconst GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nconst SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\n\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\n\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nconst ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string()\n  })\n});\nconst ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nconst ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(type({\n      pubkey: PublicKeyFromString,\n      signer: boolean(),\n      writable: boolean()\n    })),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string()\n  })\n});\nconst TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\n/**\n * @internal\n */\n\nconst ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult)))\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult)))\n});\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nconst GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\n\nconst GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nconst GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\n\nconst GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: ConfirmedTransactionMetaResult,\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult\n})));\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\n\nconst GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\n\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\n\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\nconst PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\n\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\n\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\n\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\n\nconst SendTransactionRpcResult = jsonRpcResult(string());\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * @internal\n */\nconst LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n/**\n * Filter for log subscriptions.\n */\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nclass Connection {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n\n  /** @internal */\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, commitmentOrConfig) {\n    this._commitment = void 0;\n    this._confirmTransactionInitialTimeout = void 0;\n    this._rpcEndpoint = void 0;\n    this._rpcWsEndpoint = void 0;\n    this._rpcClient = void 0;\n    this._rpcRequest = void 0;\n    this._rpcBatchRequest = void 0;\n    this._rpcWebSocket = void 0;\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketHeartbeat = null;\n    this._rpcWebSocketIdleTimeout = null;\n    this._rpcWebSocketGeneration = 0;\n    this._disableBlockhashCaching = false;\n    this._pollingBlockhash = false;\n    this._blockhashInfo = {\n      recentBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    this._nextClientSubscriptionId = 0;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    this._subscriptionsByHash = {};\n    this._subscriptionsAutoDisposedByRpc = new Set();\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(url.toString(), useHttps, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new Client(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n  /**\n   * The default commitment used for requests\n   */\n\n\n  get commitment() {\n    return this._commitment;\n  }\n  /**\n   * The RPC endpoint\n   */\n\n\n  get rpcEndpoint() {\n    return this._rpcEndpoint;\n  }\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n\n\n  async getBalanceAndContext(publicKey, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get balance for ' + publicKey.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the balance for the specified public key\n   */\n\n\n  async getBalance(publicKey, commitment) {\n    return await this.getBalanceAndContext(publicKey, commitment).then(x => x.value).catch(e => {\n      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Fetch the estimated production time of a block\n   */\n\n\n  async getBlockTime(slot) {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n\n    if ('error' in res) {\n      throw new Error('failed to get block time for slot ' + slot + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n\n\n  async getMinimumLedgerSlot() {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get minimum ledger slot: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n\n\n  async getFirstAvailableBlock() {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get first available block: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch information about the current supply\n   */\n\n\n  async getSupply(config) {\n    let configArg = {};\n\n    if (typeof config === 'string') {\n      configArg = {\n        commitment: config\n      };\n    } else if (config) {\n      configArg = { ...config,\n        commitment: config && config.commitment || this.commitment\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current supply of a token mint\n   */\n\n\n  async getTokenSupply(tokenMintAddress, commitment) {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current balance of a token account\n   */\n\n\n  async getTokenAccountBalance(tokenAddress, commitment) {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n    if ('error' in res) {\n      throw new Error('failed to get token account balance: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n\n\n  async getTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n\n    if ('error' in res) {\n      throw new Error('failed to get token accounts owned by account ' + ownerAddress.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n\n\n  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n\n    if ('error' in res) {\n      throw new Error('failed to get token accounts owned by account ' + ownerAddress.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n\n\n  async getLargestAccounts(config) {\n    const arg = { ...config,\n      commitment: config && config.commitment || this.commitment\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n\n\n  async getTokenLargestAccounts(mintAddress, commitment) {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get token largest accounts: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n\n\n  async getAccountInfoAndContext(publicKey, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n\n\n  async getParsedAccountInfo(publicKey, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key\n   */\n\n\n  async getAccountInfo(publicKey, commitment) {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n    }\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n\n\n  async getMultipleAccountsInfoAndContext(publicKeys, commitment) {\n    const keys = publicKeys.map(key => key.toBase58());\n\n    const args = this._buildArgs([keys], commitment, 'base64');\n\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n\n    if ('error' in res) {\n      throw new Error('failed to get info for accounts ' + keys + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n\n\n  async getMultipleAccountsInfo(publicKeys, commitment) {\n    const res = await this.getMultipleAccountsInfoAndContext(publicKeys, commitment);\n    return res.value;\n  }\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n\n\n  async getStakeActivation(publicKey, commitment, epoch) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined, epoch !== undefined ? {\n      epoch\n    } : undefined);\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n\n    if ('error' in res) {\n      throw new Error(`failed to get Stake Activation ${publicKey.toBase58()}: ${res.error.message}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n\n\n  async getProgramAccounts(programId, configOrCommitment) {\n    const extra = {};\n    let commitment;\n    let encoding;\n\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', extra);\n\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get accounts owned by program ' + programId.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n\n\n  async getParsedProgramAccounts(programId, configOrCommitment) {\n    const extra = {};\n    let commitment;\n\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', extra);\n\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get accounts owned by program ' + programId.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n\n\n  async confirmTransaction(signature, commitment) {\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n    let subscriptionId;\n    let response = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(signature, (result, context) => {\n          subscriptionId = undefined;\n          response = {\n            context,\n            value: result\n          };\n          resolve(null);\n        }, subscriptionCommitment);\n      } catch (err) {\n        reject(err);\n      }\n    });\n    let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip':\n        {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(`Transaction was not confirmed in ${duration.toFixed(2)} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`);\n    }\n\n    return response;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n\n  async getClusterNodes() {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n\n  async getVoteAccounts(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current slot that the node is processing\n   */\n\n\n  async getSlot(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n\n\n  async getSlotLeader(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n\n\n  async getSlotLeaders(startSlot, limit) {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current status of a signature\n   */\n\n\n  async getSignatureStatus(signature, config) {\n    const {\n      context,\n      value: values\n    } = await this.getSignatureStatuses([signature], config);\n    assert(values.length === 1);\n    const value = values[0];\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n\n\n  async getSignatureStatuses(signatures, config) {\n    const params = [signatures];\n\n    if (config) {\n      params.push(config);\n    }\n\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n\n\n  async getTransactionCount(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n\n\n  async getTotalSupply(commitment) {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true\n    });\n    return result.value.total;\n  }\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n\n\n  async getInflationGovernor(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n\n\n  async getInflationReward(addresses, epoch, commitment) {\n    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined, {\n      epoch\n    });\n\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Info parameters\n   */\n\n\n  async getEpochInfo(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n\n\n  async getEpochSchedule() {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n\n    const epochSchedule = res.result;\n    return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);\n  }\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n\n\n  async getLeaderSchedule() {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n\n\n  async getMinimumBalanceForRentExemption(dataLength, commitment) {\n    const args = this._buildArgs([dataLength], commitment);\n\n    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n\n\n  async getRecentBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n\n\n  async getRecentPerformanceSamples(limit) {\n    const args = this._buildArgs(limit ? [limit] : []);\n\n    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', args);\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get recent performance samples: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n\n\n  async getFeeCalculatorForBlockhash(blockhash, commitment) {\n    const args = this._buildArgs([blockhash], commitment);\n\n    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n\n    const {\n      context,\n      value\n    } = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null\n    };\n  }\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n\n\n  async getFeeForMessage(message, commitment) {\n    const wireMessage = message.serialize().toString('base64');\n\n    const args = this._buildArgs([wireMessage], commitment);\n\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n\n\n  async getRecentBlockhash(commitment) {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n\n\n  async getLatestBlockhash(commitment) {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n\n\n  async getLatestBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get latest blockhash: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the node version\n   */\n\n\n  async getVersion() {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the genesis hash\n   */\n\n\n  async getGenesisHash() {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a processed block from the cluster.\n   */\n\n\n  async getBlock(slot, opts) {\n    const args = this._buildArgsAtLeastConfirmed([slot], opts && opts.commitment);\n\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n    return { ...result,\n      transactions: result.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: { ...transaction,\n            message\n          }\n        };\n      })\n    };\n  }\n  /*\n   * Returns the current block height of the node\n   */\n\n\n  async getBlockHeight(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get block height information: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n\n\n  async getBlockProduction(configOrCommitment) {\n    let extra;\n    let commitment;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {\n        commitment: c,\n        ...rest\n      } = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n\n    if ('error' in res) {\n      throw new Error('failed to get block production information: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n\n\n  async getTransaction(signature, opts) {\n    const args = this._buildArgsAtLeastConfirmed([signature], opts && opts.commitment);\n\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n    return { ...result,\n      transaction: { ...result.transaction,\n        message: new Message(result.transaction.message)\n      }\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n\n\n  async getParsedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n\n\n  async getParsedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   */\n\n\n  async getTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n\n\n  async getConfirmedBlock(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = { ...result,\n      transactions: result.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: { ...transaction,\n            message\n          }\n        };\n      })\n    };\n    return { ...block,\n      transactions: block.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        return {\n          meta,\n          transaction: Transaction.populate(transaction.message, transaction.signatures)\n        };\n      })\n    };\n  }\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n\n\n  async getBlocks(startSlot, endSlot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n\n\n  async getBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get block: ' + res.error.message);\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n\n    return result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n\n\n  async getConfirmedBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    return result;\n  }\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n\n\n  async getConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return { ...result,\n      transaction: Transaction.populate(message, signatures)\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n\n\n  async getParsedConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed transaction: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n\n\n  async getParsedConfirmedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n      return {\n        methodName: 'getConfirmedTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n      if ('error' in res) {\n        throw new Error('failed to get confirmed transactions: ' + res.error.message);\n      }\n\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n\n\n  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    let options = {};\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n\n    while (!('until' in options)) {\n      startSlot--;\n\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');\n\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n\n    while (!('before' in options)) {\n      endSlot++;\n\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n\n  async getConfirmedSignaturesForAddress2(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed signatures for address: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n\n  async getSignaturesForAddress(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get signatures for address: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n\n\n  async getNonceAndContext(nonceAccount, commitment) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(nonceAccount, commitment);\n    let value = null;\n\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n\n\n  async getNonce(nonceAccount, commitment) {\n    return await this.getNonceAndContext(nonceAccount, commitment).then(x => x.value).catch(e => {\n      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n\n\n  async requestAirdrop(to, lamports) {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n\n    if ('error' in res) {\n      throw new Error('airdrop to ' + to.toBase58() + ' failed: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n\n  async _recentBlockhash(disableCache) {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n  /**\n   * @internal\n   */\n\n\n  async _pollNewBlockhash() {\n    this._pollingBlockhash = true;\n\n    try {\n      const startTime = Date.now();\n\n      for (let i = 0; i < 50; i++) {\n        const {\n          blockhash\n        } = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: []\n          };\n          return blockhash;\n        } // Sleep for approximately half a slot\n\n\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n  /**\n   * Simulate a transaction\n   */\n\n\n  async simulateTransaction(transactionOrMessage, signers, includeAccounts) {\n    let transaction;\n\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx = transactionOrMessage;\n      transaction = new Transaction({\n        recentBlockhash: originalTx.recentBlockhash,\n        nonceInfo: originalTx.nonceInfo,\n        feePayer: originalTx.feePayer,\n        signatures: [...originalTx.signatures]\n      });\n      transaction.instructions = transactionOrMessage.instructions;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage); // HACK: this function relies on mutating the populated transaction\n\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        if (!signers) break;\n        transaction.sign(...signers);\n\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n\n        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n\n    const signData = message.serialize();\n\n    const wireTransaction = transaction._serialize(signData);\n\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment: this.commitment\n    };\n\n    if (includeAccounts) {\n      const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n\n    if ('error' in res) {\n      let logs;\n\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n\n      throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, logs);\n    }\n\n    return res.result;\n  }\n  /**\n   * Sign and send a transaction\n   */\n\n\n  async sendTransaction(transaction, signers, options) {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n\n\n  async sendRawTransaction(rawTransaction, options) {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(encodedTransaction, options);\n    return result;\n  }\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n\n\n  async sendEncodedTransaction(encodedTransaction, options) {\n    const config = {\n      encoding: 'base64'\n    };\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = options && options.preflightCommitment || this.commitment;\n\n    if (options && options.maxRetries) {\n      config.maxRetries = options.maxRetries;\n    }\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n\n    if ('error' in res) {\n      let logs;\n\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n\n      throw new SendTransactionError('failed to send transaction: ' + res.error.message, logs);\n    }\n\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n\n    this._updateSubscriptions();\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnError(err) {\n    console.error('ws error:', err.message);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnClose(code) {\n    this._rpcWebSocketGeneration++;\n\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n\n      return;\n    } // implicit close, prepare subscriptions for auto-reconnect\n\n\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(this._subscriptionsByHash).forEach(([hash, subscription]) => {\n      this._subscriptionsByHash[hash] = { ...subscription,\n        state: 'pending'\n      };\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(`Error when closing socket connection: ${err.message}`);\n            }\n          }\n        }, 500);\n      }\n\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all( // Don't be tempted to change this to `Object.entries`. We call\n    // `_updateSubscriptions` recursively when processing the state,\n    // so it's important that we look up the *current* version of\n    // each subscription, every time we process a hash.\n    Object.keys(this._subscriptionsByHash).map(async hash => {\n      const subscription = this._subscriptionsByHash[hash];\n\n      if (subscription === undefined) {\n        // This entry has since been deleted. Skip.\n        return;\n      }\n\n      switch (subscription.state) {\n        case 'pending':\n        case 'unsubscribed':\n          if (subscription.callbacks.size === 0) {\n            /**\n             * You can end up here when:\n             *\n             * - a subscription has recently unsubscribed\n             *   without having new callbacks added to it\n             *   while the unsubscribe was in flight, or\n             * - when a pending subscription has its\n             *   listeners removed before a request was\n             *   sent to the server.\n             *\n             * Being that nobody is interested in this\n             * subscription any longer, delete it.\n             */\n            delete this._subscriptionsByHash[hash];\n\n            if (subscription.state === 'unsubscribed') {\n              delete this._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];\n            }\n\n            await this._updateSubscriptions();\n            return;\n          }\n\n          await (async () => {\n            const {\n              args,\n              method\n            } = subscription;\n\n            try {\n              this._subscriptionsByHash[hash] = { ...subscription,\n                state: 'subscribing'\n              };\n              const serverSubscriptionId = await this._rpcWebSocket.call(method, args);\n              this._subscriptionsByHash[hash] = { ...subscription,\n                serverSubscriptionId,\n                state: 'subscribed'\n              };\n              this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;\n              await this._updateSubscriptions();\n            } catch (e) {\n              if (e instanceof Error) {\n                console.error(`${method} error for argument`, args, e.message);\n              }\n\n              if (!isCurrentConnectionStillActive()) {\n                return;\n              } // TODO: Maybe add an 'errored' state or a retry limit?\n\n\n              this._subscriptionsByHash[hash] = { ...subscription,\n                state: 'pending'\n              };\n              await this._updateSubscriptions();\n            }\n          })();\n          break;\n\n        case 'subscribed':\n          if (subscription.callbacks.size === 0) {\n            // By the time we successfully set up a subscription\n            // with the server, the client stopped caring about it.\n            // Tear it down now.\n            await (async () => {\n              const {\n                serverSubscriptionId,\n                unsubscribeMethod\n              } = subscription;\n\n              if (this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {\n                /**\n                 * Special case.\n                 * If we're dealing with a subscription that has been auto-\n                 * disposed by the RPC, then we can skip the RPC call to\n                 * tear down the subscription here.\n                 *\n                 * NOTE: There is a proposal to eliminate this special case, here:\n                 * https://github.com/solana-labs/solana/issues/18892\n                 */\n                this._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);\n              } else {\n                this._subscriptionsByHash[hash] = { ...subscription,\n                  state: 'unsubscribing'\n                };\n\n                try {\n                  await this._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);\n                } catch (e) {\n                  if (e instanceof Error) {\n                    console.error(`${unsubscribeMethod} error:`, e.message);\n                  }\n\n                  if (!isCurrentConnectionStillActive()) {\n                    return;\n                  } // TODO: Maybe add an 'errored' state or a retry limit?\n\n\n                  this._subscriptionsByHash[hash] = { ...subscription,\n                    state: 'subscribed'\n                  };\n                  await this._updateSubscriptions();\n                  return;\n                }\n              }\n\n              this._subscriptionsByHash[hash] = { ...subscription,\n                state: 'unsubscribed'\n              };\n              await this._updateSubscriptions();\n            })();\n          }\n\n          break;\n      }\n    }));\n  }\n  /**\n   * @internal\n   */\n\n\n  _handleServerNotification(serverSubscriptionId, callbackArgs) {\n    const callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n\n    if (callbacks === undefined) {\n      return;\n    }\n\n    callbacks.forEach(cb => {\n      try {\n        cb( // I failed to find a way to convince TypeScript that `cb` is of type\n        // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n        // See https://github.com/microsoft/TypeScript/issues/47615\n        // @ts-ignore\n        ...callbackArgs);\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, AccountNotificationResult);\n\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n  /**\n   * @internal\n   */\n\n\n  _makeSubscription(subscriptionConfig,\n  /**\n   * When preparing `args` for a call to `_makeSubscription`, be sure\n   * to carefully apply a default `commitment` property, if necessary.\n   *\n   * - If the user supplied a `commitment` use that.\n   * - Otherwise, if the `Connection::commitment` is set, use that.\n   * - Otherwise, set it to the RPC server default: `finalized`.\n   *\n   * This is extremely important to ensure that these two fundamentally\n   * identical subscriptions produce the same identifying hash:\n   *\n   * - A subscription made without specifying a commitment.\n   * - A subscription made where the commitment specified is the same\n   *   as the default applied to the subscription above.\n   *\n   * Example; these two subscriptions must produce the same hash:\n   *\n   * - An `accountSubscribe` subscription for `'PUBKEY'`\n   * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n   *   `'finalized'`.\n   *\n   * See the 'making a subscription with defaulted params omitted' test\n   * in `connection-subscriptions.ts` for more.\n   */\n  args) {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify$1([subscriptionConfig.method, args], true\n    /* isArrayProp */\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = { ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending'\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(subscription !== undefined, `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`);\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n\n    this._updateSubscriptions();\n\n    return clientSubscriptionId;\n  }\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n\n\n  onAccountChange(publicKey, callback, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized', // Apply connection/server default.\n    'base64');\n\n    return this._makeSubscription({\n      callback,\n      method: 'accountSubscribe',\n      unsubscribeMethod: 'accountUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnProgramAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, ProgramAccountNotificationResult);\n\n    this._handleServerNotification(subscription, [{\n      accountId: result.value.pubkey,\n      accountInfo: result.value.account\n    }, result.context]);\n  }\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n\n\n  onProgramAccountChange(programId, callback, commitment, filters) {\n    const args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized', // Apply connection/server default.\n    'base64'\n    /* encoding */\n    , filters ? {\n      filters: filters\n    } : undefined\n    /* extra */\n    );\n\n    return this._makeSubscription({\n      callback,\n      method: 'programSubscribe',\n      unsubscribeMethod: 'programUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeProgramAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');\n  }\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n\n\n  onLogs(filter, callback, commitment) {\n    const args = this._buildArgs([typeof filter === 'object' ? {\n      mentions: [filter.toString()]\n    } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n\n    return this._makeSubscription({\n      callback,\n      method: 'logsSubscribe',\n      unsubscribeMethod: 'logsUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n\n\n  async removeOnLogsListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnLogsNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, LogsNotificationResult);\n\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSlotNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotNotificationResult);\n\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n\n\n  onSlotChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotSubscribe',\n      unsubscribeMethod: 'slotUnsubscribe'\n    }, []\n    /* args */\n    );\n  }\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeSlotChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSlotUpdatesNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotUpdateNotificationResult);\n\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n\n\n  onSlotUpdate(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotsUpdatesSubscribe',\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe'\n    }, []\n    /* args */\n    );\n  }\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeSlotUpdateListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');\n  }\n  /**\n   * @internal\n   */\n\n\n  async _unsubscribeClientSubscription(clientSubscriptionId, subscriptionName) {\n    const dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn('Ignored unsubscribe request because an active subscription with id ' + `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` + 'could not be found.');\n    }\n  }\n\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n\n    if (commitment || encoding || extra) {\n      let options = {};\n\n      if (encoding) {\n        options.encoding = encoding;\n      }\n\n      if (commitment) {\n        options.commitment = commitment;\n      }\n\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n\n      args.push(options);\n    }\n\n    return args;\n  }\n  /**\n   * @internal\n   */\n\n\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n\n    return this._buildArgs(args, override, encoding, extra);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSignatureNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SignatureNotificationResult);\n\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n\n    this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{\n      type: 'received'\n    }, result.context] : [{\n      type: 'status',\n      result: result.value\n    }, result.context]);\n  }\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n\n\n  onSignature(signature, callback, commitment) {\n    const args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context); // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n\n          try {\n            this.removeSignatureListener(clientSubscriptionId); // eslint-disable-next-line no-empty\n          } catch {// Already removed.\n          }\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n\n    return clientSubscriptionId;\n  }\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n\n\n  onSignatureWithOptions(signature, callback, options) {\n    const {\n      commitment,\n      ...extra\n    } = { ...options,\n      commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.\n\n    };\n\n    const args = this._buildArgs([signature], commitment, undefined\n    /* encoding */\n    , extra);\n\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        callback(notification, context); // Signatures subscriptions are auto-removed by the RPC service\n        // so no need to explicitly send an unsubscribe message.\n\n        try {\n          this.removeSignatureListener(clientSubscriptionId); // eslint-disable-next-line no-empty\n        } catch {// Already removed.\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n\n    return clientSubscriptionId;\n  }\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeSignatureListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnRootNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, RootNotificationResult);\n\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n\n\n  onRootChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'rootSubscribe',\n      unsubscribeMethod: 'rootUnsubscribe'\n    }, []\n    /* args */\n    );\n  }\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeRootChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');\n  }\n\n}\n\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\nclass Keypair {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair) {\n    this._keypair = void 0;\n\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n  /**\n   * Generate a new random keypair\n   */\n\n\n  static generate() {\n    return new Keypair(nacl.sign.keyPair());\n  }\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n\n\n  static fromSecretKey(secretKey, options) {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n\n    return new Keypair(keypair);\n  }\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n\n\n  static fromSeed(seed) {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n  /**\n   * The public key for this keypair\n   */\n\n\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n  /**\n   * The raw secret key for this keypair\n   */\n\n\n  get secretKey() {\n    return this._keypair.secretKey;\n  }\n\n}\n\nconst PRIVATE_KEY_BYTES$1 = 64;\nconst PUBLIC_KEY_BYTES$1 = 32;\nconst SIGNATURE_BYTES = 64;\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\nclass Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      instructionIndex\n    } = params;\n    assert(publicKey.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey.length} bytes`);\n    assert(signature.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`);\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n    const instructionData = Buffer$1.alloc(messageDataOffset + message.length);\n    const index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n    : instructionIndex;\n    ED25519_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      padding: 0,\n      signatureOffset,\n      signatureInstructionIndex: index,\n      publicKeyOffset,\n      publicKeyInstructionIndex: index,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: index\n    }, instructionData);\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey,\n      message,\n      instructionIndex\n    } = params;\n    assert(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n\n}\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\n\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n/**\n * Stake account authority info\n */\n\nclass Authorized {\n  /** stake authority */\n\n  /** withdraw authority */\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    this.staker = void 0;\n    this.withdrawer = void 0;\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n\n}\n\n/**\n * Stake account lockup info\n */\nclass Lockup {\n  /** Unix timestamp of lockup expiration */\n\n  /** Epoch of lockup expiration */\n\n  /** Lockup custodian authority */\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    this.unixTimestamp = void 0;\n    this.epoch = void 0;\n    this.custodian = void 0;\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n  /**\n   * Default, inactive Lockup value\n   */\n\n\n}\nLockup.default = new Lockup(0, 0, PublicKey.default);\n\n/**\n * Stake Instruction class\n */\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized,\n      lockup\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      stakeAuthorizationType\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeMerge(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey\n    };\n  }\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Stake program\n */\n\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Stake program\n   */\n\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params) {\n    const {\n      stakePubkey,\n      authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n\n\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n\n\n  static delegate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n\n  static authorize(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  static splitInstruction(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n\n\n  static split(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.authorizedPubkey,\n      newAccountPubkey: params.splitStakePubkey,\n      lamports: 0,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction(params));\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n\n\n  static splitWithSeed(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.allocate({\n      accountPubkey: splitStakePubkey,\n      basePubkey,\n      seed,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction({\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    }));\n  }\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n\n\n  static merge(params) {\n    const {\n      stakePubkey,\n      sourceStakePubKey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: sourceStakePubKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n\n\n  static withdraw(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n\n\n  static deactivate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n}\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\nStakeProgram.space = 200;\n\nconst {\n  publicKeyCreate,\n  ecdsaSign\n} = secp256k1;\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);\n\n    try {\n      return Buffer$1.from(sha3.keccak_256.update(toBuffer(publicKey)).digest()).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n\n\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n\n\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0\n    } = params;\n    let ethAddress;\n\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer$1.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer$1.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = Buffer$1.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      ethAddressOffset,\n      ethAddressInstructionIndex: instructionIndex,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message,\n      instructionIndex\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n\n      const messageHash = Buffer$1.from(sha3.keccak_256.update(toBuffer(message)).digest());\n      const {\n        signature,\n        recid: recoveryId\n      } = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n\n}\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\n\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n/**\n * @internal\n */\n\nconst InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string())\n});\n/**\n * ValidatorInfo class\n */\n\nclass ValidatorInfo {\n  /**\n   * validator public key\n   */\n\n  /**\n   * validator information\n   */\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    this.key = void 0;\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n\n\n  static fromConfigData(buffer) {\n    const PUBKEY_LENGTH = 32;\n    let byteArray = [...buffer];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({\n        publicKey,\n        isSigner\n      });\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(Buffer$1.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assert$7(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n\n}\n\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(), // votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(), // authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(), // epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n\n/**\n * VoteAccount class\n */\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n\n\n  static fromAccountData(buffer) {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n    let rootSlot = va.rootSlot;\n\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp\n    });\n  }\n\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch\n}) {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch\n}) {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  };\n}\n\nfunction getPriorVoters({\n  buf,\n  idx,\n  isEmpty\n}) {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx).map(parsePriorVoters)];\n}\n\n/**\n * Vote account info\n */\n\nclass VoteInit {\n  /** [0, 100] */\n  constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n    this.nodePubkey = void 0;\n    this.authorizedVoter = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n\n}\n/**\n * Create vote account transaction params\n */\n\n/**\n * Vote Instruction class\n */\nclass VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n\n\n  static decodeInitializeAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n    const {\n      voteInit\n    } = decodeData(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n    };\n  }\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      voteAuthorizationType\n    } = decodeData(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      }\n    };\n  }\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  }\n});\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nconst VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Vote program\n */\n\nclass VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Vote program\n   */\n\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(params) {\n    const {\n      votePubkey,\n      nodePubkey,\n      voteInit\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n        commission: voteInit.commission\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: nodePubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.votePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.initializeAccount({\n      votePubkey: params.votePubkey,\n      nodePubkey: params.voteInit.nodePubkey,\n      voteInit: params.voteInit\n    }));\n  }\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n\n\n  static authorize(params) {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n\n\n  static withdraw(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      lamports,\n      toPubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n}\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\nVoteProgram.space = 3731;\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n\n  if (status.err) {\n    throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n\n  return signature;\n}\n\nconst endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n\n  return url;\n}\n\n/**\n * There are 1-billion lamports in one SOL\n */\n\nconst LAMPORTS_PER_SOL = 1000000000;\n\nexport { Account, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, COMPUTE_BUDGET_INSTRUCTION_LAYOUTS, ComputeBudgetInstruction, ComputeBudgetProgram, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, Loader, Lockup, MAX_SEED_LENGTH, Message, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PublicKey, SIGNATURE_LENGTH_IN_BYTES, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionInstruction, VALIDATOR_INFO_KEY, VOTE_PROGRAM_ID, ValidatorInfo, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };\n//# sourceMappingURL=index.browser.esm.js.map\n"],"names":["toBuffer","arr","Buffer","Uint8Array","buffer","byteOffset","byteLength","commonjsGlobal","globalThis","window","g","self","getDefaultExportFromCjs","x","__esModule","Object","prototype","hasOwnProperty","call","hash$1","utils$9","minimalisticAssert","assert$6","val","msg","Error","equal","l","r","inherits_browser","exports","create","ctor","superCtor","super_","constructor","value","enumerable","writable","configurable","TempCtor","assert$5","inherits","isSurrogatePair","i","charCodeAt","length","htonl","w","zero2","word","zero8","toArray","enc","Array","isArray","slice","res","replace","push","parseInt","p","c","toHex","toString","toHex32","endian","join32","start","end","len","k","split32","m","rotr32","b","rotl32","sum32","a","sum32_3","sum32_4","d","sum32_5","e","sum64","buf","pos","ah","al","bh","lo","hi","sum64_hi","bl","sum64_lo","sum64_4_hi","ch","cl","dh","dl","carry","sum64_4_lo","sum64_5_hi","eh","el","sum64_5_lo","rotr64_hi","num","rotr64_lo","shr64_hi","shr64_lo","common$5","utils$8","assert$4","BlockHash$4","this","pending","pendingTotal","blockSize","outSize","hmacStrength","padLength","_delta8","_delta32","BlockHash","update","concat","_update","digest","_pad","_digest","bytes","t","sha","common$4","ch32$1","y","z","maj32$1","p32","ft_1","s","ch32","maj32","s0_256","s1_256","g0_256","g1_256","utils$6","common$3","shaCommon$1","rotl32$1","sum32$2","sum32_5$1","BlockHash$3","sha1_K","SHA1","h","W","_1","utils$5","common$2","shaCommon","assert$3","sum32$1","sum32_4$1","BlockHash$2","sha256_K","SHA256$1","_256","f","T1","T2","utils$4","SHA256","SHA224","_224","utils$3","common$1","assert$2","BlockHash$1","sha512_K","SHA512$1","_512","ch64_hi","xh","xl","yh","yl","zh","ch64_lo","zl","maj64_hi","maj64_lo","s0_512_hi","s0_512_lo","s1_512_hi","s1_512_lo","g0_512_hi","g0_512_lo","g1_512_hi","g1_512_lo","_prepareBlock","c0_hi","c0_lo","c1_hi","c1_lo","c2_hi","c2_lo","c3_hi","c3_lo","fh","fl","gh","gl","hh","hl","c4_hi","c4_lo","T1_hi","T1_lo","T2_hi","T2_lo","utils$2","SHA512","SHA384","_384","sha1","sha224","sha256","sha384","sha512","ripemd","utils$1","common","RIPEMD160","j","K","Kh","ripemd160","A","B","C","D","E","Ah","Bh","Ch","Dh","Eh","T","rh","sh","utils","assert$1","Hmac","hash","key","Hash","inner","outer","_init","hmac","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","_globalLogger","_normalizeError","missing","forEach","form","normalize","join","String","fromCharCode","message","_checkNormalize","LogLevel","ErrorCode","HEX","Logger","version","defineProperty","_log","logLevel","args","level","toLowerCase","throwArgumentError","console","log","apply","levels","DEBUG","INFO","warn","WARNING","makeError","code","params","errors","UNKNOWN_ERROR","messageDetails","keys","hex","JSON","stringify","reason","url","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","throwError","name","INVALID_ARGUMENT","argument","assert","condition","assertArgument","checkNormalize","UNSUPPORTED_OPERATION","operation","checkSafeUint53","checkArgumentCount","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","checkNew","target","kind","checkAbstract","static","censorship","permanent","globalLogger","logger","addSlice","array","arguments","isInteger","arrayify","options","result","unshift","allowMissingPrefix","substring","isHexable","toHexString","match","isHexString","hexPad","v","isBytes","data","Struct","properties","assign","encode","serialize","SOLANA_SCHEMA","deserialize","deserializeUnchecked","Map","PublicKey","super","_bn","undefined","isPublicKeyData","decoded","equals","publicKey","eq","toBase58","toBytes","toJSON","toArrayLike","zeroPad","copy","fromPublicKey","seed","programId","seeds","TypeError","publicKeyBytes","is_on_curve","createProgramAddressSync","address","nonce","seedsWithNonce","err","findProgramAddressSync","pubkeyData","default","set","fields","naclLowLevel","gf","chk","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","Z","pow2523","neq25519","I","pack25519","crypto_verify_32","PACKET_DATA_SIZE","property","rustString","rsl","_decode","decode","bind","_encode","rslShim","offset","str","chars","alloc","span","decodeLength","size","elem","shift","encodeLength","rem_len","Message","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","map","account","ix","programIdIndex","isAccountSigner","index","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","values","nonProgramIds","filter","_","numKeys","keyCount","instruction","accounts","from","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","transaction","signData","byteArray","accountCount","dataSlice","messageArgs","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","pubkey","isSigner","isWritable","Transaction","signature","signatures","feePayer","nonceInfo","_message","_json","nonceInstruction","signers","add","items","item","compileMessage","accountMetas","accountMeta","includes","sort","pubkeySorting","localeCompare","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","findIndex","feePayerIndex","payerMeta","splice","signedKeys","unsignedKeys","indexOf","meta","keyIndex","_compile","every","pair","serializeMessage","async","connection","getFeeForMessage","setSigners","seen","Set","sign","uniqueSigners","signer","_partialSign","_verifySignatures","partialSign","secretKey","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","sleep","ms","Promise","resolve","setTimeout","browser","toBigIntLE_1","toBigIntLE","reversed","reverse","BigInt","toBigIntBE","toBufferLE_1","toBufferLE","width","padStart","toBufferBE","u64","layout","encodeDecode","bigIntLayout","src","bigInt","encodeData","type","allocLength","getAlloc","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","SYSTEM_INSTRUCTION_LAYOUTS","freeze","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","SystemProgram","lamports","space","fromPubkey","newAccountPubkey","basePubkey","toPubkey","base","accountPubkey","createAccountWithSeed","noncePubkey","createAccount","initParams","nonceInitialize","authorized","instructionData","newAuthorizedPubkey","Loader","Math","ceil","chunkSize","payer","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","allocate","owner","transfer","dataLayout","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","ComputeBudgetProgram","browserPonyfill","module","global","__self__","F","fetch","DOMException","support","Symbol","Blob","viewClasses","isArrayBufferView","ArrayBuffer","isView","obj","normalizeName","test","normalizeValue","iteratorFor","iterator","next","done","Headers","headers","append","getOwnPropertyNames","consumed","body","bodyUsed","reject","fileReaderReady","reader","onload","onerror","readBlobAsArrayBuffer","blob","FileReader","promise","readAsArrayBuffer","bufferClone","view","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","FormData","_bodyFormData","URLSearchParams","DataView","_bodyArrayBuffer","get","rejected","arrayBuffer","then","text","readAsText","readBlobAsText","readArrayBufferAsText","formData","json","parse","oldValue","callback","thisArg","entries","methods","Request","input","credentials","method","mode","signal","upcased","toUpperCase","normalizeMethod","referrer","trim","split","decodeURIComponent","parseHeaders","rawHeaders","line","parts","Response","bodyInit","ok","statusText","clone","response","redirectStatuses","redirect","RangeError","location","stack","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","getAllResponseHeaders","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","ponyfill","ctx","crossFetch","objToString","objKeys","isArrayProp","max","propVal","toStr","isFinite","fastStableStringify$1","returnVal","trailingZeros","n","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","createRpcResult","jsonrpc","id","UnknownRpcResult","jsonRpcResult","schema","jsonRpcResultAndContext","context","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetBlockRpcResult","blockhash","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","lastValidBlockHeight","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","endpoint","commitmentOrConfig","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","URL","protocol","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","client","confirmTransactionInitialTimeout","useHttps","host","port","Number","makeWebsocketUrl","customFetch","fetchWithMiddleware","modifiedFetchArgs","modifiedUrl","modifiedOptions","agent","too_many_requests_retries","waitTime","createRpcClient","requests","batch","methodName","createRpcBatchRequest","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","_buildArgs","unsafeRes","getBalanceAndContext","catch","configArg","tokenMintAddress","tokenAddress","ownerAddress","_args","arg","mintAddress","getAccountInfoAndContext","publicKeys","getMultipleAccountsInfoAndContext","configOrCommitment","extra","encoding","filters","decodedSignature","Date","now","subscriptionCommitment","subscriptionId","confirmPromise","onSignature","timeoutMs","timeoutId","timeoutPromise","race","clearTimeout","promiseTimeout","removeSignatureListener","duration","toFixed","startSlot","limit","getSignatureStatuses","getSupply","excludeNonCirculatingAccountsList","addresses","epochSchedule","wireMessage","getRecentBlockhashAndContext","getLatestBlockhashAndContext","_buildArgsAtLeastConfirmed","rest","block","endSlot","transactionDetails","firstAvailableBlock","getFirstAvailableBlock","getConfirmedBlockSignatures","until","highestConfirmedRoot","getSlot","before","getConfirmedSignaturesForAddress2","accountInfo","fromAccountData","getNonceAndContext","to","disableCache","expired","_pollNewBlockhash","startTime","getRecentBlockhash","MS_PER_SLOT","transactionOrMessage","includeAccounts","originalTx","_recentBlockhash","encodedTransaction","sigVerify","traceIndent","logTrace","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","clearInterval","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","delete","_handleServerNotification","callbackArgs","cb","notification","_makeSubscription","subscriptionConfig","clientSubscriptionId","existingSubscription","onAccountChange","_unsubscribeClientSubscription","accountId","onProgramAccountChange","onLogs","mentions","onSlotChange","onSlotUpdate","subscriptionName","dispose","override","onSignatureWithOptions","onRootChange","Keypair","keypair","_keypair","skipValidation","TextEncoder","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","privateKey","fromSecretKey","createInstructionWithPublicKey","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","lockup","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","Staker","Withdrawer","StakeProgram","stakePubkey","maybeLockup","staker","withdrawer","initialize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorityBase","authoritySeed","authorityOwner","splitStakePubkey","splitInstruction","sourceStakePubKey","publicKeyCreate","ecdsaSign","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","startsWith","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","recid","website","details","keybaseUsername","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","voteInit","Voter","VoteProgram","authorizedVoter","authorizedWithdrawer","initializeAccount","voteAuthorizationType","authorizedWithdrawerPubkey","http","devnet","testnet","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL"],"sourceRoot":""}