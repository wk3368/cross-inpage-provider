{"version":3,"file":"static/chunks/985.a830547b51978b7e.js","mappings":"yLAae,SAASA,IACtB,IAAMC,GAAYC,EAAAA,EAAAA,QAAiC,MA0BnD,OAzBAC,EAAAA,EAAAA,kBAAgB,W,IACaF,EAKZA,EALVA,EAAUG,UAA6B,QAAjBH,EAAAA,EAAUG,eAAVH,IAAAA,OAAAA,EAAAA,EAAmBI,eAI9CC,OAAOC,WAAa,IAAIC,EAAAA,GAAe,CACrCC,YAA8B,QAAjBR,EAAAA,EAAUG,eAAVH,IAAAA,OAAAA,EAAAA,EAAmBI,cAChCK,gBAAiB,QACjBC,cAAe,OACfC,QAAS,gBACTC,eAAAA,SAAeC,GACb,IAA2BA,EAAAA,EAAQC,KAA3BC,EAAmBF,EAAnBE,OAAQC,EAAWH,EAAXG,OAEhB,GADAC,QAAQC,IAAI,wBAAyB,CAAEH,OAAAA,EAAQC,OAAAA,IAChC,OAAXD,EACF,MAAO,qBAET,GAAe,UAAXA,EACF,MAAO,CAAEI,QAAS,mBAEpB,GAAe,UAAXJ,EACF,MAAM,IAAIK,MAAM,oCAlBpBH,QAAQI,MAAM,sBAsBf,KACG,UACHC,MAAG,C,UACC,CAAC,KAAM,QAAS,SAASC,KAAI,SAACR,EAAQS,GACrC,OAAM,UACHC,SAAM,CAELC,QAAS,YAEFC,EAAAA,EAAAA,GACH,CACEZ,OAAAA,EACAC,OAAQ,CAAC,CAAEQ,MAAAA,KAEbnB,OAAOC,a,UAGZ,gBACeS,EAAO,MAZhBA,O,SAgBVa,SAAM,CACLC,IAAK7B,EACL8B,IAAK,gBACLC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SAChCC,YAAa,S,wYC9DhB,SAAeP,EAAW,EAE/BQ,G,OAFoBR,EAAU,sB,SAAVA,I,OAAAA,EAAU,YAAzB,SAAQ,EACb,EACAQ,G,IADEpB,EAAQC,EAIFoB,E,wEAJNrB,EAAF,EAAEA,OAAQC,EAAV,EAAUA,O,kBAImB,OAANmB,QAAAA,IAAAA,OAAAA,EAAAA,EAAQE,QAAQ,CACnCC,MAAO,gBACPxB,KAAM,CACJC,OAAAA,EACAC,OAAAA,K,OAJEoB,EAAS,EAAH,KAOZnB,QAAQC,IAAI,cAAeH,EAAQ,WAASqB,G,gDAE5CnB,QAAQI,MAAM,+BAAgCN,EAAQ,WAAO,M,0DAdjC","sources":["webpack://_N_E/./components/iframe/IFrameHostExample.tsx","webpack://_N_E/./components/iframe/utils.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/restrict-plus-operands,@typescript-eslint/ban-ts-comment */\nimport { useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react'\nimport { JsBridgeIframe } from '@onekeyfe/cross-inpage-provider-core'\nimport { IJsonRpcRequest } from '@onekeyfe/cross-inpage-provider-types'\nimport { sendMethod } from './utils'\n\ndeclare global {\n  interface Window {\n    frameBridge: JsBridgeIframe;\n    hostBridge: JsBridgeIframe;\n  }\n}\n\nexport default function IFrameHostExample() {\n  const iframeRef = useRef<HTMLIFrameElement | null>(null);\n  useLayoutEffect(() => {\n    if (!iframeRef.current || !iframeRef.current?.contentWindow) {\n      console.error('iframe not ready');\n      return;\n    }\n    window.hostBridge = new JsBridgeIframe({\n      remoteFrame: iframeRef.current?.contentWindow,\n      remoteFrameName: 'FRAME',\n      selfFrameName: 'HOST',\n      channel: 'onekey-js-sdk',\n      receiveHandler(payload) {\n        const { method, params } = payload.data as IJsonRpcRequest;\n        console.log('receiveHandler >>>>> ', { method, params });\n        if (method === 'hi') {\n          return 'from HOST: hahahah';\n        }\n        if (method === 'hello') {\n          return { message: 'from HOST: okok' };\n        }\n        if (method === 'error') {\n          throw new Error('from HOST: something is wrong');\n        }\n      },\n    });\n  }, []);\n  return (\n    <div>\n        {['hi', 'hello', 'error'].map((method, index) => {\n          return (\n            <button\n              key={method}\n              onClick={() => {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n                void sendMethod(\n                  {\n                    method,\n                    params: [{ index }],\n                  },\n                  window.hostBridge,\n                );\n              }}\n            >\n              sendToFrame ({method})\n            </button>\n          );\n        })}\n        <iframe\n          ref={iframeRef}\n          src={'/iframe/frame'}\n          style={{ width: '100%', height: '400px' }}\n          frameBorder={0}\n        />\n    </div>\n  );\n}\n","import { JsBridgeIframe } from '@onekeyfe/cross-inpage-provider-core';\nimport { IJsonRpcRequest } from '@onekeyfe/cross-inpage-provider-types';\n\nexport async function sendMethod(\n  { method, params }: IJsonRpcRequest,\n  bridge?: JsBridgeIframe,\n): Promise<void> {\n  try {\n    const result = await bridge?.request({\n      scope: '$hardware_sdk',\n      data: {\n        method,\n        params,\n      },\n    });\n    console.log('result >>>>', method, ' --> ', result);\n  } catch (e) {\n    console.error('bridge send ERROR response: ', method, ' --> ', e);\n  }\n}\n"],"names":["IFrameHostExample","iframeRef","useRef","useLayoutEffect","current","contentWindow","window","hostBridge","JsBridgeIframe","remoteFrame","remoteFrameName","selfFrameName","channel","receiveHandler","payload","data","method","params","console","log","message","Error","error","div","map","index","button","onClick","sendMethod","iframe","ref","src","style","width","height","frameBorder","bridge","result","request","scope"],"sourceRoot":""}